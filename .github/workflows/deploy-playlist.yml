name: Ultra-Fast Playlist Deploy

on:
  push:
    branches: [tyo878787]
  schedule:
    - cron: '0 0 * * *'  # Auto-update setiap hari jam 00:00 UTC

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup directories
        run: |
          mkdir -p tmp docs
          echo "üìÅ Folder structure:"
          ls -la

      # Download playlist1
      - name: Download Playlist 1
        run: |
          set -e
          curl -f -L "https://raw.githubusercontent.com/tyo878787/my-iptv-playlist/tyo878787/playlist1.m3u" -o tmp/1.m3u
          echo "‚úÖ Playlist 1 downloaded successfully"
          echo "üìè Size: $(ls -lh tmp/1.m3u | awk '{print $5}')"

      # Download playlist2 dengan multi-source
      - name: Download Playlist 2
        run: |
          set -e
          PLAYLIST2_URLS=(
            "https://iptv-org.github.io/iptv/index.m3u"
            "https://raw.githubusercontent.com/iptv-org/iptv/master/index.m3u"
            "https://cdn.jsdelivr.net/gh/iptv-org/iptv/index.m3u"
            "https://gitlab.com/iptv-org/iptv/-/raw/master/index.m3u"
          )
          
          downloaded=false
          
          for i in "${!PLAYLIST2_URLS[@]}"; do
            url="${PLAYLIST2_URLS[$i]}"
            echo "  ‚îî‚îÄ Trying source $((i+1)): ${url}"
            
            if curl -f -L "$url" -o tmp/2.m3u; then
              if [ -s "tmp/2.m3u" ]; then
                echo "‚úÖ Downloaded playlist 2 from source $((i+1))"
                downloaded=true
                break
              else
                echo "‚ö†Ô∏è Empty file, trying next source..."
                rm -f "tmp/2.m3u"
              fi
            else
              echo "‚ö†Ô∏è Failed, trying next source..."
            fi
          done
          
          if [ "$downloaded" = false ]; then
            echo "‚ùå Failed to download playlist 2 from all sources"
            exit 1
          fi
          
          echo "üìè Size: $(ls -lh tmp/2.m3u | awk '{print $5}')"

      - name: Validate playlists
        run: |
          echo "üîç Validating playlists:"
          if [ ! -s tmp/1.m3u ]; then
            echo "‚ùå Playlist 1 is empty or invalid"
            exit 1
          fi
          if [ ! -s tmp/2.m3u ]; then
            echo "‚ùå Playlist 2 is empty or invalid"
            exit 1
          fi
          echo "‚úÖ Both playlists are valid"

      - name: Combine playlists
        run: |
          echo "#EXTM3U" > docs/Finalplay.m3u
          sed '1d' tmp/1.m3u >> docs/Finalplay.m3u
          sed '1d' tmp/2.m3u >> docs/Finalplay.m3u
          
          echo "üìä Playlist stats:"
          echo "   Total channels: $(grep -c '^#EXTINF' docs/Finalplay.m3u)"
          echo "   File size: $(ls -lh docs/Finalplay.m3u | awk '{print $5}')"

      - name: Compress playlist
        run: |
          gzip -k -9 docs/Finalplay.m3u
          echo "üì¶ Compressed size: $(ls -lh docs/Finalplay.m3u.gz | awk '{print $5}')"

      - name: Copy index.html
        run: |
          if [ ! -f "index.html" ]; then
            echo "‚ùå index.html not found!"
            exit 1
          fi
          cp index.html docs/
          echo "‚úÖ index.html copied successfully"

      - name: Verify docs content
        run: |
          echo "üìÇ Docs folder content:"
          ls -lh docs/
          echo ""
          echo "‚ÑπÔ∏è File info:"
          file docs/Finalplay.m3u
          file docs/Finalplay.m3u.gz
          file docs/index.html

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/
          retention-days: 1

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
        id: deployment
        timeout-minutes: 3

      - name: Show deployment info
        run: |
          echo "üöÄ Deployment successful!"
          echo "Time: ${{ steps.deployment.outputs.time }}"
          echo "Playlist URL: https://${{ github.repository_owner }}.github.io/${{ github.repository }}/Finalplay.m3u"
          echo "Web URL: https://${{ github.repository_owner }}.github.io/${{ github.repository }}"
