import requests
import sys
import os
import re
from datetime import datetime, timedelta

# Konfigurasi
SOURCE_PRIVATE = "https://raw.githubusercontent.com/tyo878787/my-iptv-playlist/refs/heads/tyo878787/RfK01.m3u"
SOURCE_PUBLIC = "https://iptv-org.github.io/iptv/index.m3u"
OUTPUT_FILE = "RfK01.m3u"
REFRESH_HOURS = 6  # Interval update dalam jam
SHORT_URL = "https://rebrand.ly/RFK02"  # Menggunakan shortlink Bree Anda

# Regex untuk mendeteksi baris EXTINF dan URL
EXTINF_PATTERN = re.compile(r'^#EXTINF:')
URL_PATTERN = re.compile(r'^https?://')

def fetch_playlist(url):
    try:
        print(f"üì° Fetching playlist: {url}")
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        return response.text
    except Exception as e:
        print(f"‚ùå Error fetching {url}: {str(e)}")
        return ""

def clean_playlist(content):
    """Membersihkan playlist dan memastikan setiap channel memiliki URL"""
    lines = content.splitlines()
    cleaned_lines = []
    i = 0
    total_lines = len(lines)
    
    while i < total_lines:
        line = lines[i].strip()
        if not line:
            i += 1
            continue
            
        if EXTINF_PATTERN.match(line):
            # Ini baris EXTINF, ambil sampai baris URL berikutnya
            channel_lines = [line]
            i += 1
            # Cari baris URL berikutnya
            while i < total_lines:
                next_line = lines[i].strip()
                if not next_line:
                    i += 1
                    continue
                if URL_PATTERN.match(next_line):
                    channel_lines.append(next_line)
                    cleaned_lines.extend(channel_lines)
                    i += 1
                    break
                elif EXTINF_PATTERN.match(next_line):
                    # Baris EXTINF berikutnya tanpa URL? skip channel ini
                    print(f"‚ö†Ô∏è Channel tanpa URL: {line}")
                    break
                else:
                    # Line tambahan (seperti tvg-logo, group-title) tambahkan
                    channel_lines.append(next_line)
                    i += 1
        else:
            # Baris lain (seperti header) tambahkan langsung
            cleaned_lines.append(line)
            i += 1
            
    return "\n".join(cleaned_lines)

def main():
    print("\n" + "="*50)
    print("üöÄ Starting Bree IPTV Playlist Update")
    print("="*50)
    
    # Ambil playlist
    private_playlist = fetch_playlist(SOURCE_PRIVATE)
    public_playlist = fetch_playlist(SOURCE_PUBLIC)
    
    # Bersihkan dan gabungkan
    combined = ""
    if private_playlist:
        cleaned_private = clean_playlist(private_playlist)
        combined += cleaned_private + "\n\n"
    if public_playlist:
        cleaned_public = clean_playlist(public_playlist)
        combined += cleaned_public + "\n\n"
    
    if not combined:
        print("\n‚ùå Critical Error: All sources failed!")
        sys.exit(1)
    
    # Header untuk auto-update
    now_utc = datetime.utcnow()
    next_update = now_utc + timedelta(hours=REFRESH_HOURS)
    
    header = f"""#EXTM3U
## AUTO-GENERATED BY BREE IPTV SYSTEM
## Created: {now_utc.strftime("%Y-%m-%d %H:%M:%S UTC")}
## Next Update: {next_update.strftime("%Y-%m-%d %H:%M:%S UTC")}
## User Access: {SHORT_URL}
## Private Source: {SOURCE_PRIVATE}
## Public Source: {SOURCE_PUBLIC}
#REFRESH-INTERVAL:{REFRESH_HOURS * 3600}
#REFRESH-URI:{SHORT_URL}
#REFRESH-DATE:{next_update.strftime("%Y-%m-%dT%H:%M:%SZ")}
#GENERATED-BY:https://github.com/tyo878787/my-iptv-playlist\n\n"""
    
    # Gabungkan header dengan konten
    full_playlist = header + combined.strip()
    
    # Simpan ke file
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(full_playlist)
    
    # Verifikasi dasar
    channel_count = full_playlist.count('#EXTINF')
    print("\n" + "="*50)
    print(f"‚úÖ Success! Playlist saved to {OUTPUT_FILE}")
    print(f"üîó User Access URL: {SHORT_URL}")
    print(f"‚è± Next auto-refresh: {next_update.strftime('%Y-%m-%d %H:%M UTC')}")
    print(f"üì∫ Total channels: {channel_count}")
    print("="*50)
    
    # Verifikasi file
    file_size = os.path.getsize(OUTPUT_FILE)
    print(f"üìÅ File size: {file_size/1024:.2f} KB")

if __name__ == "__main__":
    main()
