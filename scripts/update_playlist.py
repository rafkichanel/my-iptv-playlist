import requests
import sys
from datetime import datetime, timedelta

# Konfigurasi
SOURCE_PRIVATE = "https://raw.githubusercontent.com/tyo878787/my-iptv-playlist/refs/heads/tyo878787/RfK01.m3u"
SOURCE_PUBLIC = "https://iptv-org.github.io/iptv/index.m3u"
OUTPUT_FILE = "RfK01.m3u"
REFRESH_HOURS = 6
SHORT_URL = "https://rebrand.ly/RFK02"

def fetch_playlist(url):
    try:
        print(f"üîó Fetching playlist: {url}")
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        return response.text
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return ""

def ensure_valid_m3u(content):
    """Pastikan konten adalah playlist M3U yang valid"""
    lines = content.splitlines()
    output_lines = []
    
    # Cari header #EXTM3U, jika tidak ada tambahkan
    if not lines or lines[0].strip() != "#EXTM3U":
        output_lines.append("#EXTM3U")
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if not line:
            i += 1
            continue
            
        # Jika baris adalah URL dan sebelumnya bukan #EXTINF, tambahkan #EXTINF default
        if line.startswith("http"):
            # Buat EXTINF default
            channel_name = f"Channel {len(output_lines)//2 + 1}"
            output_lines.append(f'#EXTINF:-1,{channel_name}')
            output_lines.append(line)
        elif line.startswith("#EXTINF"):
            # Jika ada EXTINF, ambil sampai ketemu URL
            output_lines.append(line)
            # Cari URL berikutnya
            j = i + 1
            while j < len(lines) and not lines[j].strip().startswith("http"):
                j += 1
            if j < len(lines):
                output_lines.append(lines[j].strip())
                i = j  # Lompat ke baris URL
        else:
            # Baris lain (komentar, dll) tetap disimpan
            output_lines.append(line)
            
        i += 1
        
    return "\n".join(output_lines)

def main():
    print("üöÄ Starting playlist update...")
    
    # Ambil playlist
    private_content = fetch_playlist(SOURCE_PRIVATE)
    public_content = fetch_playlist(SOURCE_PUBLIC)
    
    # Pastikan format valid
    private_playlist = ensure_valid_m3u(private_content) if private_content else ""
    public_playlist = ensure_valid_m3u(public_content) if public_content else ""
    
    # Gabungkan: private dulu, lalu public
    combined = private_playlist + "\n" + public_playlist if private_playlist and public_playlist else private_playlist or public_playlist
    
    if not combined:
        print("‚ùå Error: No valid playlist content!")
        sys.exit(1)
    
    # Header untuk auto-update Ott Navigator
    now_utc = datetime.utcnow()
    next_update = now_utc + timedelta(hours=REFRESH_HOURS)
    
    header = f"""#EXTM3U
## AUTO-GENERATED BY BREE IPTV SYSTEM
## Created: {now_utc.strftime("%Y-%m-%d %H:%M:%S UTC")}
## Next Update: {next_update.strftime("%Y-%m-%d %H:%M:%S UTC")}
## User Access: {SHORT_URL}
#REFRESH-INTERVAL:{REFRESH_HOURS * 3600:.1f}
#REFRESH-URI:{SHORT_URL}
#REFRESH-DATE:{next_update.strftime("%Y-%m-%dT%H:%M:%SZ")}
#GENERATED-BY:https://github.com/tyo878787/my-iptv-playlist

"""
    
    full_playlist = header + combined.strip()
    
    # Simpan ke file
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(full_playlist)
    
    print(f"‚úÖ Playlist saved to {OUTPUT_FILE}")
    print(f"üì∫ Total channels: {full_playlist.count('#EXTINF')}")

if __name__ == "__main__":
    main()
